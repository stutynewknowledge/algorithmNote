1、队列:先进先出
	循环队列:能重复利用已经取出的空间
力扣622题
设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。
循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。
你的实现应该支持如下操作：
MyCircularQueue(k): 构造器，设置队列长度为 k 。
Front: 从队首获取元素。如果队列为空，返回 -1 。
Rear: 获取队尾元素。如果队列为空，返回 -1 。
enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。
deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。
isEmpty(): 检查循环队列是否为空。
isFull(): 检查循环队列是否已满。
示例：
MyCircularQueue circularQueue = new MycircularQueue(3); // 设置长度为 3

circularQueue.enQueue(1);  // 返回 true

circularQueue.enQueue(2);  // 返回 true

circularQueue.enQueue(3);  // 返回 true

circularQueue.enQueue(4);  // 返回 false，队列已满

circularQueue.Rear();  // 返回 3

circularQueue.isFull();  // 返回 true

circularQueue.deQueue();  // 返回 true

circularQueue.enQueue(4);  // 返回 true

circularQueue.Rear();  // 返回 4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/design-circular-queue

# 思路:利用数组和双指针来实现。

class MyCircularQueue:
    def __init__(self, k: int):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        """
        self.k = k
        self.head = 0
        self.tail = 0
        self.queue = [None for _ in range(k)]

    def enQueue(self, value: int) -> bool:
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        """
        if self.isFull():  # 此时队列已经满了
            return False
        else:
            if self.head == 0 and self.tail == 0:
                self.head = 1
                self.tail = 1
            else:
            	if self.tail != self.head:
                    if self.tail == self.k:
                        self.tail = 1
                    else:
                        self.tail += 1
                elif self.queue[self.tail - 1] != None:
                    if self.tail == self.k:
                        self.tail = 1
                    else:
                        self.tail += 1
            self.queue[self.tail - 1] = value
            return True

    def deQueue(self) -> bool:
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        """
        if not self.isEmpty():  # 队列不为空
            if self.head == self.tail:
                self.queue[self.head - 1] = None
                return True
            else:
                self.queue[self.head - 1] = None
                if self.head == self.k:
                    self.head = 1
                else:
                    self.head += 1
                return True
        else:  # 队列为空,不能删除，返回False
            return False

    def Front(self) -> int:
        """
        Get the front item from the queue.
        """
        if self.isEmpty():
            return -1
        else:
            result = self.queue[self.head - 1]
            return result

    def Rear(self) -> int:
        """
        Get the last item from the queue.
        """
        if self.isEmpty():
            return -1
        else:
            result = self.queue[self.tail - 1]
            return result

    def isEmpty(self) -> bool:
        """
        Checks whether the circular queue is empty or not.
        """
        if self.head and self.tail:
            if self.head == self.tail and self.queue[self.head - 1] == None:
                return True
            else:
                return False
        else:
            return True

    def isFull(self) -> bool:
        """
        Checks whether the circular queue is full or not.
        """
        if self.head == 1 and self.tail == self.k:
            return True
        if self.tail == self.head - 1:
            return True
        else:
            return False
346. 数据流中的移动平均值
给定一个整数数据流和一个窗口大小，根据该滑动窗口的大小，计算其所有整数的移动平均值。

示例:

MovingAverage m = new MovingAverage(3);
m.next(1) = 1
m.next(10) = (1 + 10) / 2
m.next(3) = (1 + 10 + 3) / 3
m.next(5) = (10 + 3 + 5) / 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/moving-average-from-data-stream
# 思路:1、用一个变量存储所有值的总和，一个队列存储到那个值的和,当超出队列的大小时，用（所有值的总和-队列第一个值）/ 队列的大小， 未超出时，用所有值的总和/此时队列中值的个数
class MovingAverage:
    def __init__(self, size: int):
        """
        Initialize your data structure here.
        """
        self.size = size
        self.level = 0       # 放入了多少个数
        self.sum = []         # 之前的和
        self.average = 0
        self.now_sum = 0    # 总和
    def next(self, val: int) -> float:
        if self.level < self.size:
            self.level += 1
            self.now_sum += val
            self.average = self.now_sum / self.level
        else:
            no_1_sum = self.sum.pop()
            self.now_sum = self.now_sum  + val
            self.average = (self.now_sum - no_1_sum) / self.level
        self.sum.insert(0, self.now_sum)
        return self.average