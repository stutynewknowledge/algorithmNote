力扣133.克隆图
给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 val（Int） 和其邻居的列表（list[Node]）。

示例：



输入：
{"$id":"1","neighbors":[{"$id":"2","neighbors":[{"$ref":"1"},{"$id":"3","neighbors":[{"$ref":"2"},{"$id":"4","neighbors":[{"$ref":"3"},{"$ref":"1"}],"val":4}],"val":3}],"val":2},{"$ref":"4"}],"val":1}

解释：
节点 1 的值是 1，它有两个邻居：节点 2 和 4 。
节点 2 的值是 2，它有两个邻居：节点 1 和 3 。
节点 3 的值是 3，它有两个邻居：节点 2 和 4 。
节点 4 的值是 4，它有两个邻居：节点 1 和 3 。
 

提示：

节点数介于 1 到 100 之间。
无向图是一个简单图，这意味着图中没有重复的边，也没有自环。
由于图是无向的，如果节点 p 是节点 q 的邻居，那么节点 q 也必须是节点 p 的邻居。
必须将给定节点的拷贝作为对克隆图的引用返回。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/clone-graph

# 思路：
	 DFS
	用一个字典的key作为唯一标识符，先克隆根节点的值，neighbors =None
		然后遍历旧的根节点的neighbors，当节点不在字典的key中，我们就将其存入字典当中，并且复制存入对应key的value。
	 BFS


class Solution:
    # DFS
    def cloneGraph(self, node: 'Node') -> 'Node':
        clone_dic = {}
        return self.__dfs(node, clone_dic)
    def __dfs(self,node, dict):
        if not node:
            return None
        if node in dict:        # node在字典中，代表已经遍历过该节点，将该节点直接返回既可
            return dict[node]
        clone = Node(node.val, [])  # 没有在字典中，克隆该节点，并将其放入字典中
        dict[node] = clone      
        for n in node.neighbors:
            clone.neighbors.append(self.__dfs(n,dict))      # 遍历该节点的neighbor，然后一直遍历，直到为None时，回溯
        return clone
    # BFS
        from collections import deque
        clone_dic = {}
        if not node:
            return None
        queue = deque()     # 存储节点的所有周围节点
        queue.appendleft(node)
        clone = Node(node.val, [])  # 克隆一个新的节点
        clone_dic[node] = clone     # 用旧节点作为key，克隆出来的节点作为值
        while queue:
            current_node = queue.pop()
            for n in current_node.neighbors:
                if n not in clone_dic:  # 当旧节点在字典的key中，表示已经遍历过该节点
                    cur_neighbor = Node(n.val, [])
                    queue.appendleft(n) 
                    clone_dic[n] = cur_neighbor
                clone_dic[current_node].neighbors.append(clone_dic[n])  # 将旧节点的neighbor放入克隆节点的neighbor中，使其保持一致
        return clone

力扣 494 目标和
给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。

返回可以使最终数组和为目标数 S 的所有添加符号的方法数。

示例 1:

输入: nums: [1, 1, 1, 1, 1], S: 3
输出: 5
解释: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

一共有5种方法让最终目标和为3。
注意:

数组非空，且长度不会超过20。
初始的数组的和不会超过1000。
保证返回的最终结果能被32位整数存下。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/target-sum

思路:DFS+记忆化搜索
	# i为当前位置，cur为当前位置的总和， 字典的value存到当前为止i算出的总和为cur的方法数
class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        def dfs(cur, i, d={}):
            if i < len(nums) and (i ,cur) not in d:
                d[(i, cur)] = dfs(cur+ nums[i], i+1) + dfs(cur-nums[i], i+1)
            return d.get((i, cur), int(cur == S))
        
        return dfs(0, 0)

