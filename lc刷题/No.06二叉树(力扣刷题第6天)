二叉树的层次遍历:
	1、广度优先搜索
		广泛应用于树(图)结构中的遍历的算法: 从根节点开始，先访问节点自身，然后遍历它的相邻节点，其次遍历二级节点，在遍历三级节点，以此类推

	力扣第102.二叉树的层次遍历
	给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。
	例如:
	给定二叉树: [3,9,20,null,null,15,7],
	    3
	   / \
	  9  20
	    /  \
	   15   7
	返回其层次遍历结果：
	[
	  [3],
	  [9,20],
	  [15,7]
	]
	来源：力扣（LeetCode）
	链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal

	方法1:利用两个队列存储当前层次和下一层次的节点
		思路1、利用两个队列来存储树的当前层次的节点和下一个层次的节点
	     2、在判断存储当前层次的节点是否已经取完，若未取完，则将current.left和current.right存入下一个层次的节点；若取完后，则退出循环，判断存储下一层次的节点的队列是否有值，若有，则循环，此时的下一层次的节点的队列变为了当前层次的队列，然后对其进行相同的判断。
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        # 用两个队列来记录这一层的节点和下一层的节点
        q1 = []
        q2 = []
        q1.insert(0,root)
        values = []			# 用来存储树的值
        layer_values = []	# 用来存储当前层次的值
        current = None
        while q1 or q2:
            if q1:
                while q1:
                    current = q1.pop()
                    if current:
                    	# 将下层次的值存入另外队列中
                        q2.insert(0, current.left)	
                        q2.insert(0, current.right)
                        layer_values.append(current.val)
                if layer_values:		# 判断是否是最后一层。
                    values.append(layer_values)
                layer_values = []
            elif q2:
                while q2:
                    current = q2.pop()
                    if current:
                        q1.insert(0, current.left)
                        q1.insert(0, current.right)
                        layer_values.append(current.val)
                if layer_values:
                    values.append(layer_values)
                layer_values = []
        return values
	方法2:利用一个队列存储节点(存入的节点为元组类型(节点，i)),i表示当前节点的层次。
from collections import deque
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        que = deque([root, ])		// 创建一个双向队列
        values = []
        level = 0
        while que:
            values.append([])
            current_count = len(que)
            for i in range(current_count):
                current = que.popleft()
                values[level].append(current.val)
                if current.left:
                    que.append(current.left)
                if current.right:
                    que.append(current.right)
            level += 1
        return values

    力扣104. 二叉树的最大深度
    给定一个二叉树，找出其最大深度。
	二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
	说明: 叶子节点是指没有子节点的节点。
	示例：
	给定二叉树 [3,9,20,null,null,15,7]，
	    3
	   / \
	  9  20
	    /  \
	   15   7
	返回它的最大深度 3 。
	来源：力扣（LeetCode）
	链接：https://leetcode-cn.com/problems/maximum-depth-of-binary-tree

	思路1:递归
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        # 递归
        if not root:
            return 0
        else:
            left_length = self.maxDepth(root.left)		# 自顶向下，返回左边的深度
            right_length = self.maxDepth(root.right)	# 自顶向下，返回右边的深度
            return max(left_length, right_length) + 1

    思路二:迭代
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        # 迭代
        stack = []				# 保存节点的级数和节点
        level = 0
        if root:
            stack.append((1, root))
        while stack:
            current_level, current = stack.pop()
            if current:
                level = max(level, current_level)
                stack.append((current_level+1, current.left))
                stack.append((current_level+1, current.right))
        return level

    力扣112.路经总和
    给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。
	说明: 叶子节点是指没有子节点的节点。
	示例: 
	给定如下二叉树，以及目标和 sum = 22，
	              5
	             / \
	            4   8
	           /   / \
	          11  13  4
	         /  \      \
	        7    2      1
	返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。
	来源：力扣（LeetCode）
	链接：https://leetcode-cn.com/problems/path-sum

	方法1、思路:递归
	方法2、思路:迭代
	class Solution:
    def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        # 递归
        stack = []
        if root:
            stack.append((root, 0))
        while stack:
            current, current_sum = stack.pop()
            current_sum += current.val
            if current.left:
                stack.append((current.left, current_sum))
            if current.right:
                stack.append((current.right, current_sum))
            elif not current.left and not current.right:
                if current_sum == sum:
                    return True
        return False
