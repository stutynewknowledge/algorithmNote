力扣27.移除元素
给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

示例 1:

给定 nums = [3,2,2,3], val = 3,

函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。

你不需要考虑数组中超出新长度后面的元素。
示例 2:

给定 nums = [0,1,2,2,3,0,4,2], val = 2,

函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。

注意这五个元素可为任意顺序。

你不需要考虑数组中超出新长度后面的元素。
说明:

为什么返回数值是整数，但输出的答案是数组呢?

请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下:

// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
int len = removeElement(nums, val);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-element

思路:双指针，一个走的快，一个走的慢，快的遇到与目标元素不相等的时候，便将值赋给慢的，相等的时候，慢的停在原地。最后数组的大小便是慢的指针的大小
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        # 双指针
        slow = 0
        n = len(nums)
        for i in range(n):
            if nums[i] != val:
                nums[slow] = nums[i]
                slow += 1
        return slow

力扣485.最大连续1的个数
给定一个二进制数组， 计算其中最大连续1的个数。

示例 1:

输入: [1,1,0,1,1,1]
输出: 3
解释: 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3.
注意：

输入的数组只包含 0 和1。
输入数组的长度是正整数，且不超过 10,000。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/max-consecutive-ones

思路:双指针，一个存储最大1的个数，一个存储每个连续1的个数，每次遇到0时或最后一次循环的时候，便相比，那个大，把大的那个返回即可。
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        max_one = 0
        continuous_one = 0
        n = len(nums)
        if n == 0:
            return 0
        for i in range(n):
            if nums[i] == 1:
                continuous_one += 1
            if nums[i] == 0 or i == n-1:
                if max_one < continuous_one:
                    max_one = continuous_one
                continuous_one = 0
        return max_one



