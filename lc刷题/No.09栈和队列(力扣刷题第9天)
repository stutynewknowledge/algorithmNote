力扣200.岛屿数量

给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-islands
思路：可以将题理解为，能够走到的1相连，是一个岛屿
	1、可以用广度优先搜索，先找到第一个陆地，然后在找到四周为1的岛屿，
	2、找过的陆地要置为海，以防下次被再次查询
	3、每次循环过后进行计数
from collections import deque
class Solution:
    def __init__(self):
        # 定义循环的四个方向
        self.directions = [[0, 1], [0,-1], [1, 0], [-1, 0]]
    def numIslands(self, grid: List[List[str]]) -> int:
        # BFS(广度优先搜索)
        m = len(grid)
        if m == 0:
            return 0
        count = 0
        n = len(grid[0])
        queue = deque()             # 用于保存陆地周围的陆地坐标
        # 寻找陆地
        for i in range(m):          
            for j in range(n):
                if grid[i][j] == '1':           # 当坐标为陆地的时候，则将其加入队列中，并且进行广度优先搜索
                    queue.append((i,j))
                    while queue:
                        queue_size = len(queue) # 保证能将相连的陆地遍历完
                        for _ in range(queue_size):
                            x, y = queue.popleft()
                            for direction in self.directions:   # 进行4个方向的遍历
                                now_x = x + direction[0]        
                                now_y = y + direction[1]
                                if 0 <= now_x <= m-1 and 0 <= now_y <= n-1 and grid[now_x][now_y] == "1":
                                    queue.append((now_x, now_y))
                                    grid[now_x][now_y] = '0'        # 将遍历过的为陆地的岛屿变为海，以防被下次遍历寻找到
                    count+=1
        return count

力扣打开转盘锁
你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9' 变为  '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。

锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。
列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。
字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。
示例 1:

输入：deadends = ["0201","0101","0102","1212","2002"], target = "0202"
输出：6
解释：
可能的移动序列为 "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202"。
注意 "0000" -> "0001" -> "0002" -> "0102" -> "0202" 这样的序列是不能解锁的，
因为当拨动到 "0102" 时这个锁就会被锁定。
示例 2:

输入: deadends = ["8888"], target = "0009"
输出：1
解释：
把最后一位反向旋转一次即可 "0000" -> "0009"

# 思路:队列+BFS
from collections import deque
class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        deadends = set(deadends)    # 去掉deadends中重复元素，遍历的时候，减少重复元素的遍历
        if '0000' in deadends:
            return -1
        directions = [1, -1]        # 2个方向
        queue = deque()
        queue.append(('0000', 0))
        while queue:
            node, step = queue.popleft()
            for i in range(4):
                for direction in directions:
                    current = node[:i] + str((int(node[i]) + direction) % 10) + node[i+1:]
                    if current == target:
                        return step + 1
                    if current not in deadends:             # 不在必死列表中
                        queue.append((current, step + 1))
                        deadends.add(current)        # 保证不会有重复数进入队列
        return -1

力扣279. 完全平方数
给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:

输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.
示例 2:

输入: n = 13
输出: 2
解释: 13 = 4 + 9.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/perfect-squares

from collections import deque
class Solution:
    def numSquares(self, n: int) -> int:
    # BFS
        if n == 0:
            return 0
        queue = deque([(n,0)])
        visited = set()         # 将已经算过的值放入集合中
        while queue:
            queue_size = len(queue)
            for _ in range(queue_size):
                current, step = queue.popleft()
                max_num = int(current**0.5) + 1
                for i in range(1, max_num):
                    poor = current - i*i
                    if poor == 0:
                        return step + 1
                    if poor not in visited: # 若没有在集合中，代表未计算过此差值，需要将此差值放入队列中进行计算
                        queue.append((poor, step+1))
                        visited.add(poor)
        return -1
    # 动态规划 (超出时间限制)
        # f_li = [float("inf") for _ in range(n+1)] # 假设n需要无穷多个的完全平方根
        # f_li[0] = 0     # 当n = 0 的时候，有0个完全平方根
        # for i in range(1, n + 1):
        #     for j in range(1, int(i ** 0.5) + 1):
        #         f_li[i] = min(f_li[i], f_li[i - j ** 2] + 1)
        # return f_li[n]

    

        
