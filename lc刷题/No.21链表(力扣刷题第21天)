力扣203.移除链表某个节点
删除链表中等于给定值 val 的所有节点。

示例:

输入: 1->2->6->3->4->5->6, val = 6
输出: 1->2->3->4->5

来源:https://leetcode-cn.com/problems/remove-linked-list-elements/

思路:
	创建一个哑节点，让其指向head，
	用previous保存上一个节点的值，遍历所有的节点，若值相等，则previous.next = previous.next.next
	删除现有的节点，若不相等，previous = current

class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:
        newhead = ListNode(0)
        previous = newhead
        current = head
        previous.next = head
        while current:
            if current.val == val:
                previous.next = previous.next.next
            else:
                previous = current
            current = current.next
        return newhead.next

力扣328.奇偶链表
给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。

请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。

示例 1:

输入: 1->2->3->4->5->NULL
输出: 1->3->5->2->4->NULL
示例 2:

输入: 2->1->3->5->6->4->7->NULL 
输出: 2->3->6->7->1->5->4->NULL
说明:

应当保持奇数节点和偶数节点的相对顺序。
链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/odd-even-linked-list

思路:1、用4个指针来保存
	odd来指向奇数节点
	odd_head 来指向奇数节点的头节点
	even来指向偶数节点
	even_head来指向偶数节点的头节点

	2、每次循环让odd.next = even.next
			odd = odd.next
			even.next = odd.next
			even = even.next
	3、循环结束后:
		让奇数节点的最后一个节点的next指向even_head即可,最后返回奇数节点的头节点
class Solution:
    def oddEvenList(self, head: ListNode) -> ListNode:
    #	特判
        if not (head and head.next):
            return head

        odd = head
        odd_head = odd
        even = head.next
        even_head = even
        while even and even.next:
            odd.next = even.next
            odd = odd.next
            even.next = odd.next
            even = even.next
        odd.next = even_head
        return odd_head
力扣234.回文链表
请判断一个链表是否为回文链表。

示例 1:

输入: 1->2
输出: false
示例 2:

输入: 1->2->2->1
输出: true
进阶：
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/palindrome-linked-list

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        '''
        思路：
            1、计算总链表大小。
            2、反转前一半的链表
            3、然后在判断链表总大小是奇数还是偶数，
                1、若为奇数：则最中间的那个节点便不需要比对，fast=fast.next
                2、若为偶数:则之间进行比对
        '''
        current = head
        count = 0
        if not (head and head.next):
            return True
        while current:
            current = current.next
            count+=1
        fast_step = count // 2
        fast = head
        previous = None
        for i in range(fast_step):
            temp = fast.next
            fast.next = previous
            previous = fast
            fast = temp
        slow = previous
        if count % 2 == 1:
            fast = fast.next
        while fast:
            if slow.val != fast.val:
                return False
            slow = slow.next
            fast = fast.next
        return True
