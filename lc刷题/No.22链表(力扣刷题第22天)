力扣21.合并两个有序链表
将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-two-sorted-lists
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution:
	'''
	思路:1、构建一个新的链表头，p = new_head
		2、当l1的值小于l2的值的时候，将p.next指向l1,然后l1 = l1.next
		   当l1的值大于l2的值的时候，将p.next指向l2, 然后l2 = l2.next
		3、每次循环结束：
			p = p.next
		4、返回新的链表头的next

	'''
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        new_head = ListNode(0)
        p = new_head
        while l1 and l2:
            if l1.val < l2.val:
                p.next = l1
                l1 = l1.next
            else:
                p.next = l2
                l2 = l2.next
            p = p.next
        if l1 or l2:
            p.next = l1 if l1 else l2
        return new_head.next

力扣2.两数相加
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-two-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
        
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
    	’‘’
    	思路:
    		1、先构建一个新的链表头 p = ret_head
    		2、每次相加，必须要考虑进位的问题，所以需要一个标志，当需要进位的时候,sign=1,不需要进位的时候,sign = 0

    	‘’‘
        ret_head = ListNode(0)
        current = ret_head
        sign = 0        # 是否进位
        while l1 and l2:
            l1.val = l1.val + l2.val + sign
            if l1.val >= 10:
                l1.val -= 10
                sign = 1
            else:
                sign = 0
            current.next = l1
            l1, l2 = l1.next, l2.next
            current = current.next
        if l1 or l2:
            l1 = l1 if l1 else l2
            while sign == 1 and l1:
                l1.val += sign
                if l1.val >= 10:
                    l1.val -= 10
                    sign = 1
                else:
                    sign = 0
                current.next = l1
                l1 = l1.next
                current = current.next
        if l1:
            current.next = l1
        if sign == 1:
            current.next = ListNode(sign)    
        return ret_head.next


力扣430.扁平化多级双向链表
您将获得一个双向链表，除了下一个和前一个指针之外，它还有一个子指针，可能指向单独的双向链表。这些子列表可能有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。

扁平化列表，使所有结点出现在单级双链表中。您将获得列表第一级的头部。

 

示例:

输入:
 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL

输出:
1-2-3-7-8-11-12-9-10-4-5-6-NULL

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution:
    def flatten(self, head: 'Node') -> 'Node':
    	'''
    	思路:利用DFS
    	'''
        if not head:
            return None
        stack = []
        stack.append(head)
        while stack:
            current = stack.pop()
            if current.next:
                stack.append(current.next)
            elif stack:		# 当current.next为None的时候，将其指向栈中的最后进去的那一个值
                current.next = stack[-1]
                current.next.prev = current
            if current.child:
                stack.append(current.child)
                current.next = current.child
                current.next.prev = current
                current.child = None
        return head
        