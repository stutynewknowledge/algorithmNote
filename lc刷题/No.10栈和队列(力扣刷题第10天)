栈:后入先出
力扣155.最小栈
设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。
push(x) -- 将元素 x 推入栈中。
pop() -- 删除栈顶的元素。
top() -- 获取栈顶元素。
getMin() -- 检索栈中的最小元素。
示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/min-stack
# 思路:以空间换时间
	方法1:通过一个辅助栈，这个辅助栈存储数据栈的每次推入数据之前的最小值。(辅助栈与数据栈的数据不同步)
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.min_stack = []     # 辅助栈，将栈中最小的数据存入此栈中
        self.stack = []         # 数据栈

    def push(self, x: int) -> None:
        self.stack.append(x)
        if len(self.min_stack) == 0 or x <= self.min_stack[-1]:   #  需要同步出栈
            self.min_stack.append(x)

    def pop(self) -> None:
        data = self.stack.pop()
        if data == self.min_stack[-1]:
            self.min_stack.pop()
        return data

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        if self.stack:
            return self.min_stack[-1]
    方法2:通过一个辅助栈，这个辅助栈的末尾存储数据栈的每次推入数据之前的最小值。(数据栈与辅助栈的数据大小同步)
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.helper = []        # 栈中最小值必须放在末尾
        self.stack = []

    def push(self, x: int) -> None:
        self.stack.append(x)
        if len(self.helper) == 0 or x <= self.helper[-1]:
            self.helper.append(x)
        else:
            self.helper.append(self.helper[-1]) # 当数据栈中新放入的值比辅助栈中末尾值da，那么就在辅助栈中在增加一个数据栈中的最小值

    def pop(self) -> None:
        if self.stack:
            self.helper.pop()
            return self.stack.pop()

    def top(self) -> int:
        return self.stack[-1]

力扣刷题20.有效的括号
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。
示例 1:

输入: "()"
输出: true
示例 2:

输入: "()[]{}"
输出: true
示例 3:

输入: "(]"
输出: false
示例 4:

输入: "([)]"
输出: false
示例 5:

输入: "{[]}"
输出: true

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/valid-parentheses

思路: 通过栈存左括号
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        for valid in s:
            if valid in ['(', '{', '[']:    # 当遇到左括号的时候,将其推入栈中
                stack.append(valid)
            if valid in [')', '}', ']']:    # 遇到右括号，与栈中的元素进行匹配，若匹配失败，则返回False
                if stack:
                    if abs(ord(stack.pop()) - ord(valid)) > 2:
                        return False
                else:
                    return False
        return stack == []
力扣739.每日温度
根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。

例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。

提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/daily-temperatures
# 思路:倒叙遍历,通过栈存储，最后一个值肯定为0，因为后面已经没有数据
当前一个温度小于后一个温度的时候，就将数据从栈中拿出，并且将结果返回给结果集，直到遍历完。

class Solution:
    def dailyTemperatures(self, T: List[int]) -> List[int]:
        stack = []
        n = len(T)
        results = [0] * n
        for i in range(n-1, -1 , -1):
            while stack and T[i] >= T[stack[-1]]:
                stack.pop()
            if stack:
                results[i] = stack[-1] - i
            stack.append(i)
        return results
