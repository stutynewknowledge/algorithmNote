力扣705.设计哈希集合
不使用任何内建的哈希表库设计一个哈希集合

具体地说，你的设计应该包含以下的功能

add(value)：向哈希集合中插入一个值。
contains(value) ：返回哈希集合中是否存在这个值。
remove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。

示例:

MyHashSet hashSet = new MyHashSet();
hashSet.add(1);         
hashSet.add(2);         
hashSet.contains(1);    // 返回 true
hashSet.contains(3);    // 返回 false (未找到)
hashSet.add(2);          
hashSet.contains(2);    // 返回 true
hashSet.remove(2);          
hashSet.contains(2);    // 返回  false (已经被删除)

注意：

所有的值都在 [0, 1000000]的范围内。
操作的总数目在[1, 10000]范围内。
不要使用内建的哈希集合库。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/design-hashset


class Node:
    def __init__(self, val, next):
        self.next = next
        self.val = val

class MyHashSet:
	'''
	思路: 通过链表
	'''
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.size = 1000
        self.l = [Node(None, None) for _ in range(10000)]
        

    def add(self, key: int) -> None:
        head = self.l[key % self.size]
        p = head.next
        while p:
            if p.val == key:
                break
            head = p
            p = p.next
        else:
            head.next = Node(key, None)

    def remove(self, key: int) -> None:
        head = self.l[key % self.size]
        p = head.next
        while p:
            if p.val == key:
                head.next = p.next
                break
            head = p
            p = p.next        

    def contains(self, key: int) -> bool:
        """
        Returns true if this set contains the specified element
        """
        head = self.l[key % self.size]
        p = head.next
        while p:
            if p.val == key:
                return True
            head = p
            p = p.next
        
力扣706.设计哈希映射
不使用任何内建的哈希表库设计一个哈希映射

具体地说，你的设计应该包含以下的功能

put(key, value)：向哈希映射中插入(键,值)的数值对。如果键对应的值已经存在，更新这个值。
get(key)：返回给定的键所对应的值，如果映射中不包含这个键，返回-1。
remove(key)：如果映射中存在这个键，删除这个数值对。

示例：

MyHashMap hashMap = new MyHashMap();
hashMap.put(1, 1);          
hashMap.put(2, 2);         
hashMap.get(1);            // 返回 1
hashMap.get(3);            // 返回 -1 (未找到)
hashMap.put(2, 1);         // 更新已有的值
hashMap.get(2);            // 返回 1 
hashMap.remove(2);         // 删除键为2的数据
hashMap.get(2);            // 返回 -1 (未找到) 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/design-hashmap
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Node:
    def __init__(self, val, next=None):
        self.val = val
        self.next = next


class MyHashMap:
	'''
	通过两个链表: 一个用来保存key, 一个用来保存value
	'''
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.size = 10000
        self.key = [Node(None) for _ in range(self.size)]
        self.value = [Node(None) for _ in range(self.size)]

    def put(self, key: int, value: int) -> None:
        """
        value will always be non-negative.
        """
        index = key % self.size
        p_key = self.key[index]
        p_value = self.value[index]
        key_node = p_key.next
        value_node = p_value.next
        while key_node:
            if key_node.val == key:
                value_node.val = value
                break
            p_key = key_node
            p_value = value_node
            key_node, value_node = key_node.next, value_node.next
        else:
            p_key.next, p_value.next = Node(key), Node(value)
        

    def get(self, key: int) -> int:
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        """
        index = key % self.size
        p_key = self.key[index]
        p_value = self.value[index]
        key_node = p_key.next
        value_node = p_value.next
        while key_node:
            if key_node.val == key:
                return value_node.val
            key_node, value_node = key_node.next, value_node.next
        else:
            return -1

    def remove(self, key: int) -> None:
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        """
        index = key % self.size
        p_key = self.key[index]
        p_value = self.value[index]
        key_node = p_key.next
        value_node = p_value.next
        while key_node:
            if key_node.val == key:
                p_key.next = key_node.next
                p_value.next = value_node.next
            p_key = key_node
            p_value = value_node
            key_node, value_node = key_node.next, value_node.next
        else:
            return -1


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)


力扣217. 存在重复元素
给定一个整数数组，判断是否存在重复元素。

如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。

示例 1:

输入: [1,2,3,1]
输出: true
示例 2:

输入: [1,2,3,4]
输出: false
示例 3:

输入: [1,1,1,3,3,4,3,2,4,2]
输出: true

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/contains-duplicate
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
    	'''
    	法1:
	    	思路:通过字典来保存列表中的元素:
	    			key为列表中的值， value为值出现的次数
	    法2:
	    	思路:
	    		通过集合，使用set， 若集合的大小与列表大小相同，则没有重复元素，若不同，则有重复元素
    	'''
        dict = {}
        for i in nums:
            if i in dict:
                if dict[i] == 1:
                    return True
            else:
                dict[i] = 1
        return False
        # set_nums = set(nums)
        # if len(set_nums) == len(nums):
        #     return False
        # else:
        #     return True
力扣 136.只出现一次的数字
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,1]
输出: 1
示例 2:

输入: [4,1,2,1,2]
输出: 4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/single-number

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
    '''
    '''
        # dict = {}
        # for num in nums:
        #     try:
        #         dict.pop(num) # 数字再次出现则将其从字典中删除,若字典中没有该数字
        #     except:
        #         dict[num] = 1	# 将没有的数字保存入字典呢
        # return dict.popitem()[0]
        
        '''
        纯数学: 2*(a+b+c) - (a+a+b+b+c) = c
        '''
        return 2 * sum(set(nums)) - sum(nums)


力扣349.两个数组的交集
给定两个数组，编写一个函数来计算它们的交集。

示例 1:

输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2]
示例 2:

输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出: [9,4]
说明:

输出结果中的每个元素一定是唯一的。
我们可以不考虑输出结果的顺序。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/intersection-of-two-arrays
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
    '''
    集合求交集用&
    '''
        # return list(set([i for i in nums1 if i in nums2]))
        return list(set(nums1) & set(nums2))


