力扣557.反转字符串中的单词III

给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。

示例 1:

输入: "Let's take LeetCode contest"
输出: "s'teL ekat edoCteeL tsetnoc" 
注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reverse-words-in-a-string-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution:
    def reverseWords(self, s: str) -> str:
        # 自己写的
        s_li = s.split()
        def reverse_word(start, end, word):
            word_li = list(word)
            while start < end:
                word_li[start], word_li[end] = word_li[end], word_li[start]
                start += 1
                end -= 1
            return ''.join(word_li)
        n = len(s_li)
        for i in range(n):
            s_li[i] = reverse_word(0, len(s_li[i])-1, s_li[i])
        return ' '.join(s_li)
        # 大佬的
        # return ' '.join(s.split(' ')[::-1])[::-1]

删除排序数组中的重复项
给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

示例 1:

给定数组 nums = [1,1,2], 

函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

你不需要考虑数组中超出新长度后面的元素。
示例 2:

给定 nums = [0,0,1,1,1,2,2,3,3,4],

函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素。
说明:

为什么返回数值是整数，但输出的答案是数组呢?

请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下:

// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}

思路:双指针
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        slow = 0
        n = len(nums)
        if n == 0:
            return 0
        for i in range(0, n):
            if nums[i] != nums[slow]:
                slow += 1
                nums[slow] = nums[i]
                
        return slow + 1


力扣
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

示例:

输入: [0,1,0,3,12]
输出: [1,3,12,0,0]
说明:

必须在原数组上操作，不能拷贝额外的数组。
尽量减少操作次数。

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # 倒叙遍历
        n = len(nums)
        for i in range(n-1, -1, -1):
            if nums[i] == 0:
                nums.append(nums[i])
                del nums[i]
        return nums