数组：python中为列表
	动态数组：不规定大小，随数据的大小变化而变化
二维数组:[[]],列表中嵌套列表

力扣724.寻找数组中心索引
给定一个整数类型的数组 nums，请编写一个能够返回数组“中心索引”的方法。

我们是这样定义数组中心索引的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。

如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。

示例 1:

输入: 
nums = [1, 7, 3, 6, 5, 6]
输出: 3
解释: 
索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。
同时, 3 也是第一个符合要求的中心索引。
示例 2:

输入: 
nums = [1, 2, 3]
输出: -1
解释: 
数组中不存在满足此条件的中心索引。
说明:

nums 的长度范围为 [0, 10000]。
任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。
# 方法:
	先计算数组总和，然后遍历数组，将遍历过的数进行累加，在判断left_sum = sum - left_sum - nums[i]
class Solution:
    def pivotIndex(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 0:
            return -1
        s = sum(nums)           # 计算nums的总和
        left_sum = 0            # 记录已经遍历过的和
        for i in range(n):
            if left_sum == s - left_sum - nums[i]:  # 当遍历过的和与为遍历过的和相等时(取出正在遍历的和)，此时正在遍历的索引便是中间索引
                return i
            left_sum += nums[i]
        return -1

力扣747.至少是其他数字两倍的最大数
#思路:具体看代码注释
class Solution:
    def dominantIndex(self, nums: List[int]) -> int:
        # 方法1
        max_num = max(nums)
        n = len(nums)
        max_index = None
        for i in range(n):
            if nums[i] == max_num:
                max_index = i
                continue
            if nums[i]*2 > max_num:
                return -1
        return max_index
        # 方法2:我们只需要找到数组中最大的数和第二大的数，在进行比较既可
        n = len(nums)
        if n == 0:
            return -1
        if n == 1:
            return 0
        max_num = 0
        max_index = 0
        second_num = 0
        for index, value in enumerate(nums):
            if value > max_num:
                second_num = max_num
                max_num = value
                max_index = index
            elif value > second_num:
                second_num = value
        if second_num * 2 > max_num:
            return -1
        return max_index

力扣66.加一
给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

示例 1:

输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。
示例 2:

输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/plus-one


class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        n = len(digits)
        if n == 0:
            return 0
        sum = 0
        sum_str = ''
        for i in range(n):
            sum = sum * 10 + digits[i]
        sum_str += str(sum+1)
        return [int(j) for j in sum_str]

给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。

 

力扣498.对角线遍历
示例:

输入:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

输出:  [1,2,4,7,5,3,6,8,9]

思路:具体看代码注释
class Solution:
    def findDiagonalOrder(self, matrix: List[List[int]]) -> List[int]:
        m = len(matrix)
        if m == 0:
            return matrix
        n = len(matrix[0])
        diagonal_num = m + n - 1  # 不难发现对角线的条数是 m + n - 1条
        ret = []
        for current_diagonal in range(diagonal_num):    # 对角线从0开始
            x_start = max(0, current_diagonal-n+1)      
            # 开始标志:当此时的对角线比n大的时候，就要取current_diagonal-n+1
            # 0 if current_diagonal < n else current_diagonal - n + 1
            x_end = min(current_diagonal, m-1)          
            # 结束标志:当对角线大的时候，就要取m-1,当对角线小的时候，就要取对角线
            # m-1 if current_diagonal > n else current_diagonal
            if current_diagonal % 2 == 1:   # 为基数的时候(注意对角线是从0开始计数)
                for i in range(x_start, x_end+1):   # ↙️去取
                    ret.append(matrix[i][current_diagonal-i])
                     # 行列相加之和始终等于current_diagonal
            else:
                for i in range(x_end, x_start-1, -1):   # ↗️去取
                    ret.append(matrix[i][current_diagonal-i])
        return ret



