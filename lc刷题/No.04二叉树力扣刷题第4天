100、相同的树
给定两个二叉树，编写一个函数来检验它们是否相同。
如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。
示例 1:
输入:       1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]
输出: true
示例 2:
输入:      1          1
          /           \
         2             2

        [1,2],     [1,null,2]
输出: false
示例 3:
输入:       1         1
          / \       / \
         2   1     1   2
        [1,2,1],   [1,1,2]
输出: false
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/same-tree

思路1:使用递归的方法
	1、树相同，可以划分为p和q皆为None或者数p的值和树q的值相同
	2、那么其他情况则为False
class Solution(object):
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        # 递归
        if not q and not p:				# 判断p和q是否皆为None
            return True
        if not q or not p:				# 判断p或者q是否有一个为None
            return False
        if q.val != p.val:				# 判断p的值或者q的值是否相等
            return False
        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right) # 只有同时为真的时候q或者q才可能相同。同时为真的情况就是p和q的树取到了最后一行，并且前面的值皆相同，才会同时返回真。
思路2:使用迭代的方法:
	1、用一个列表来存放p和q的左边和右边
	2、然后每次同时取出p和q的左边或者右边
	3、在用思路1的验证方法进行验证。
class Solution(object):
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        def check(p, q):
            if not q and not p:
                return True
            if not q or not p:
                return False
            if q.val != p.val:
                return False
            return True
        tree_li = [(p,q),]		# 将p和q合成一个元组，保证每次都能同时取出p和q同一行的左边和右边
        while tree_li:			# 当树的值被取完后，便退出循环
            p, q = tree_li.pop()	# 每次就取出并删除tree_li的最后一个数据
            if not check(p, q):		# 若检查出p和q中有一个不相等，就直接返回False。
                return False
# p和q皆有值的时候，才能p.left q.left p.right q.right,若其中一个没有值，其中一个有值，便不会走到这一行，这里的情况只可能是，要没两个都有值，要么两个都没有值。
            if p and q:								
                tree_li.append((p.left, q.left))
                tree_li.append((p.right, q.right))
        return True

101.对称二叉树
给定一个二叉树，检查它是否是镜像对称的。
例如，二叉树 [1,2,2,3,4,4,3] 是对称的。
    1
   / \
  2   2
 / \ / \
3  4 4  3

但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:
    1
   / \
  2   2
   \   \
   3    3
说明:
如果你可以运用递归和迭代两种方法解决这个问题，会很加分。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/symmetric-tree

思路1:递归
	 1、证明一个树对称二叉树可以将这一个树劈成两半，左边为一个树p,右边为一个树q
	 2、当p的左边的每一个值和q的右边每一个值相等，那么这个树就是对称二叉树。
	 3、此时就与100题类似
class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        # 递归
        if not root:
            return True
        def isSame(p,q):
            if not p and not q:
                return True
            if not p or not q:
                return False
            if p.val != q.val:
                return False
            return isSame(p.left, q.right) and isSame(p.right, q.left)
        return isSame(root.left, root.right)

思路2:迭代
	class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        def check(p, q):
            if not p and not q:
                return True
            if not p or not q:
                return False
            if p.val != q.val:
                return False
            return True
        tree_li = [(root.left,root.right), ]
        while tree_li:
            p, q = tree_li.pop()
            if not check(p ,q):
                return False
            if p:
                tree_li.append((p.left, q.right))
                tree_li.append((p.right, q.left))
        return True

256、粉刷房子
假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。
当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的矩阵来表示的。
例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。请你计算出粉刷完所有房子最少的花费成本。
注意：
所有花费均为正整数。
示例：
输入: [[17,2,17],[16,16,5],[14,3,19]]
输出: 10
解释: 将 0 号房子粉刷成蓝色，1 号房子粉刷成绿色，2 号房子粉刷成蓝色。
     最少花费: 2 + 5 + 3 = 10。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/paint-house

思路:动态规划
	1、确定状态
		最后一步:最后一个房子要么是红色，要么是蓝色，要么事绿色
		子问题:那么只需要知道最后粉刷红色房子之前的价格，最后粉刷蓝色之前的价格，最后粉刷绿色之前的价格
	2、状态转移方程
		f[i][0] = min(f[i-1][1],f[i-1][2]) + costs[i][0]
        f[i][1] = min(f[i-1][0], f[i-1][2]) + costs[i][1]
        f[i][2] = min(f[i-1][0], f[i-1][1]) + costs[i][2]
    3、初始情况和边界情况
    	初始情况：
    		f[0][0] = costs[0][0]
        	f[0][1] = costs[0][1]
        	f[0][2] = costs[0][2]
        边界情况:没有房子的时候
    4、计算顺序
    	从左到右(因为从状态转移方程我们可以知道,当计算右边的时候,左边的已经计算过了)
class Solution(object):
    def minCost(self, costs):
        """
        :type costs: List[List[int]]
        :rtype: int
        """
        n = len(costs)
        if n == 0:
            return 0
        f = [[0 for _ in range(3)] for _ in range(n)]
        f[0][0] = costs[0][0]
        f[0][1] = costs[0][1]
        f[0][2] = costs[0][2]
        for i in range(1, n):
            f[i][0] = min(f[i-1][1],f[i-1][2]) + costs[i][0]
            f[i][1] = min(f[i-1][0], f[i-1][2]) + costs[i][1]
            f[i][2] = min(f[i-1][0], f[i-1][1]) + costs[i][2]
        return min(f[n-1])

有 k 种颜色的涂料和一个包含 n 个栅栏柱的栅栏，每个栅栏柱可以用其中一种颜色进行上色。
你需要给所有栅栏柱上色，并且保证其中相邻的栅栏柱 最多连续两个 颜色相同。然后，返回所有有效涂色的方案数。
注意:
n 和 k 均为非负的整数。
示例:
输入: n = 3，k = 2
输出: 6
解析: 用 c1 表示颜色 1，c2 表示颜色 2，所有可能的涂色方案有:
            柱 1    柱 2   柱 3     
 -----      -----  -----  -----       
   1         c1     c1     c2 
   2         c1     c2     c1 
   3         c1     c2     c2 
   4         c2     c1     c1  
   5         c2     c1     c2
   6         c2     c2     c1
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/paint-fence

思路:
	1、确定状态
		最后一步:涂最后一个栅栏的颜色的方法肯定是k
		子问题:求涂一个栅栏颜色的方法
			前一个栅栏的颜色与最后一个相同时，那么肯定与倒数第三个的颜色不同:f[i-1]*(j-1)
			前一个栅栏的颜色与最后一个不同时:f[i-2]*(j-1)
	2、转移方程
		f[i] = f[i-1]*(j-1) + f[i-2]*(j-1)
	3、初始情况和边界情况
		f[0] = k		只有一个栅栏的时候，肯定只有k种方法
		f[1] = k*k		只有两个栅栏的时候，肯定只有k**2种方法
		边界情况:当没有栅栏的时候，肯定返回0
	4、计算顺序
		从小到大
		
class Solution(object):
def numWays(self, n, k):
    """
    :type n: int
    :type k: int
    :rtype: int
    """
    if n == 0:
        return 0
    if n == 1:
        return k
    f = [0 for _ in range(n)]
    f[0] = k
    f[1] = k*k
    for i in range(2 ,n):
        f[i] = f[i-2] * (k-1) + f[i-1] * (k-1)
    return f[n-1]


